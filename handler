#!/bin/bash
# requires:
# https://github.com/OmarCastro/rofi-blocks
# jq (https://github.com/stedolan/jq)
#	
## realtime suggestions for rofi
## Author: https://github.com/BelkaDev

############# SETTINGS
refreshrate=2 # refresh suggestions every n characters hit 
declare -A APIs
APIs=(
  ["ddg"]=$(dirname $0)/APIs/ddg # path to ddg API script
  ["lastfm"]=$(dirname $0)/APIs/lastfm # path to lastfm API script
  ["deezer"]=$(dirname $0)/APIs/deezer # path to deezer API script
  ["spotify"]=$(dirname $0)/APIs/deezer # path to deezer API script
  ["google"]=$(dirname $0)/APIs/google # path to google API script
  ["amazon"]=$(dirname $0)/APIs/amazon # path to amazon API script
  ["youtube"]=$(dirname $0)/APIs/youtube # path to youtube API script
  ["archwiki"]=$(dirname $0)/APIs/archwiki # path to archwiki API script
  ["wikipedia"]=$(dirname $0)/APIs/wikipedia # path to wikipedia API script
  ["googlebooks"]=$(dirname $0)/APIs/googlebooks # path to googlebooks API script
  ["tailwind"]=$(dirname $0)/APIs/tailwind # path to tailwind API script
)
##################################################


logfile="$(dirname $0)/logfile.tmp"
[ ! -f "$logfile" ] && echo "run the wrapper script instead" && exit 1
API=$(cat $logfile)
search="${APIs[$API]}"
if [ -z search ]; then
  echo "unrecognized api" && echo 1
fi
rm "$logfile"

# Determine if a 0 refresh rate is allowed
# per API
case "$API" in 
  "ddg") allowExcess=true ;; 
  "youtube") allowExcess=true ;;
  "google") allowExcess=true ;;
  "wikipedia") allowExcess=true ;;
  "amazon") allowExcess=true ;;
  "archwiki") allowExcess=true ;;
esac

suggestions=""
default_custom_format="{{name_enum}}:{{value}}"
custom_format="${format:-$default_custom_format}"

urlencode() {
echo ${1// /"%20"}
}

convertJson(){
	echo "$1" | sed -e 's/\\/\\\\/g' -e 's/\"/\\"/g' -e 's/.*/"&"/' | paste -sd "," -
}

fill_menu(){

	JSON_LINES="$(convertJson "$suggestions")"

 	TEXT=$(cat <<EOF | tr -d "\n" | tr -d "\t"  
{
	"event format":"${custom_format}",
	"lines":[ 
	${JSON_LINES}
	]
}
EOF
)
	printf '%s\n' "$TEXT"
}

echo '{"input action":"send"}'

unset length i
while IFS= read -r line; do
  ((i++))
  [[ "$line" = 'SELECT'* ]] && selected=$(echo "$line" | cut -d':' -f2-) && break;

  print=$(echo "$line" | cut -d':' -f2-)
  #custom algorithm to reduce Api calls
  [[ "${#print}" < $length ]] && length="${#print}" && continue;
  length="${#print}"
  if (( i%refreshrate == 0 )) || [ ! -z $allowExcess ]; then suggestions="$(bash $search $print)"

    [[ "${line:0:1}" != '{' ]] && suggestions="${print}"$'\n'"$suggestions"
    fill_menu "$print"
  fi
done
selected="$(tr '[:lower:]' '[:upper:]' <<< ${selected:0:1})${selected:1}"
[ -z "$selected" ] && rm $logfile || printf "$selected" >"$logfile"
exit 0
